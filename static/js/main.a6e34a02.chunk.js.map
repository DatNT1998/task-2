{"version":3,"sources":["components/Goal.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Goal","goal","updates","console","log","className","type","defaultChecked","fields","complete","disabled","title","details","map","update","index","key","App","useState","goals","setGoals","setUpdates","useEffect","fetch","then","resp","json","data","records","catch","err","id","filter","goalID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sPA6BeA,MA3Bf,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAElB,OADAC,QAAQC,IAAIF,EAAS,kBAEjB,6BACI,2BAAOG,UAAU,eACb,2BAAOC,KAAK,WAAWC,eAAgBN,EAAKO,OAAOC,SAAUC,UAAQ,IACrE,gCAAMT,EAAKO,OAAOG,QAItB,yBAAKN,UAAU,WACX,yCACA,+BAAKJ,EAAKO,OAAOI,UAGrB,yBAAKP,UAAU,WACX,yCAEIH,EAAQW,KAAI,SAACC,EAAQC,GAAT,OACR,uBAAGC,IAAKD,GAAR,IAAiBD,EAAON,OAAOM,c,MCiCxCG,MA9Cf,WAAe,MAIeC,mBAAS,IAJxB,mBAIJC,EAJI,KAIGC,EAJH,OAKmBF,mBAAS,IAL5B,mBAKJhB,EALI,KAKKmB,EALL,KA6BX,OAtBAC,qBAAU,WACNC,MAAM,iFACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAG,GACFP,EAASO,EAAKC,YACfC,OAAM,SAAAC,OAIbP,MAAM,mFACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAAG,GACFN,EAAWM,EAAKC,YACjBC,OAAM,SAAAC,SAGd,IAEH3B,QAAQC,IAAIF,EAAS,UAKjB,yBAAKG,UAAU,OACX,wBAAIA,UAAU,cAAd,YAEIc,EAAMN,KAAI,SAAAZ,GAAI,OACV,kBAAC,EAAD,CACIe,IAAKf,EAAK8B,GACV9B,KAAMA,EACNC,QAASA,EAAQ8B,QACb,SAAClB,GAAD,OAAYA,EAAON,OAAOyB,OAAO,KAAOhC,EAAK8B,aClCrDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.a6e34a02.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Goal({ goal, updates }) {\r\n    console.log(updates, 'update nay nay')\r\n    return (\r\n        <div>\r\n            <label className=\"label-title\">\r\n                <input type=\"checkbox\" defaultChecked={goal.fields.complete} disabled />\r\n                <h2> {goal.fields.title}</h2>\r\n            </label>\r\n\r\n\r\n            <div className=\"details\">\r\n                <h3> DETAILS </h3>\r\n                <p> {goal.fields.details}</p>\r\n            </div>\r\n\r\n            <div className=\"updates\">\r\n                <h3> UPDATES </h3>\r\n                {\r\n                    updates.map((update, index) => (\r\n                        <p key={index}> {update.fields.update}</p>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Goal;","import React, { useEffect, useState } from 'react';\nimport Goal from '../src/components/Goal.component';\n\n// import Airtable from 'airtable';\n\n\nimport './App.css';\n\nfunction App() {\n\n    // const base = new Airtable({ apiKey: \"keyF3WkWva6D8mdhC\" }).base(\"appk1k59lSJbYpMfh\");\n\n    const [goals, setGoals] = useState([]);\n    const [updates, setUpdates] = useState([]);\n\n    useEffect(() => {\n        fetch('https://api.airtable.com/v0/appk1k59lSJbYpMfh/goals?api_key=keyF3WkWva6D8mdhC')\n            .then((resp) => resp.json())\n            .then(data => {\n                setGoals(data.records);\n            }).catch(err => {\n                // Error :(\n            });\n\n        fetch('https://api.airtable.com/v0/appk1k59lSJbYpMfh/updates?api_key=keyF3WkWva6D8mdhC')\n            .then((resp) => resp.json())\n            .then(data => {\n                setUpdates(data.records)\n            }).catch(err => {\n                // Error :(\n            });\n    }, []);\n    // console.log(goals, 'goal');\n    console.log(updates, 'update')\n\n    // console.log(goals.field.updates);\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"main-title\"> My Goal</h1>\n            {\n                goals.map(goal => (\n                    <Goal\n                        key={goal.id}\n                        goal={goal}\n                        updates={updates.filter(\n                            (update) => update.fields.goalID[0] === goal.id)}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}